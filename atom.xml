<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://haihaihai2015.github.io</id>
    <title>海的博客</title>
    <updated>2021-10-20T15:21:44.915Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://haihaihai2015.github.io"/>
    <link rel="self" href="https://haihaihai2015.github.io/atom.xml"/>
    <subtitle>你是因为什么事进来的？</subtitle>
    <logo>https://haihaihai2015.github.io/images/avatar.png</logo>
    <icon>https://haihaihai2015.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 海的博客</rights>
    <entry>
        <title type="html"><![CDATA[@ RabbitMq]]></title>
        <id>https://haihaihai2015.github.io/post/rabbitmq/</id>
        <link href="https://haihaihai2015.github.io/post/rabbitmq/">
        </link>
        <updated>2021-10-20T14:01:52.000Z</updated>
        <content type="html"><![CDATA[<p><strong>接到需求要将RabbitMQ与项目整合，用来异步发送消息，功能不是很重要，只是用来存储错误日志，本以为很简单的需求，结果开始了踩坑之旅</strong></p>
<h2 id="一-配置rabbitmq">一、配置RabbitMQ</h2>
<ul>
<li>项目用的是spring boot搭建，所以采用全注解的方式进行整合</li>
</ul>
<h3 id="1导入rabbit依赖">1.导入rabbit依赖</h3>
<blockquote>
<p>注意：<br>
如果依赖需要被几个子工程使用，就将依赖放入父工程，并对其进行版本约束，这里有个坑：</p>
</blockquote>
<ol>
<li>如果父工程采用的是&lt;dependencyManagement&gt;标签，则其他子工程无法自动引入依赖，需要手动添加(无需指定版本)；</li>
<li>也可以直接另加一个&lt;dependencies&gt;的标签，仅在父工程引入依赖后即可</li>
</ol>
<pre><code class="language-xml">        &lt;!-- 暂指定RabbitMQ版本--&gt;
        &lt;rabbitMq.version&gt;2.2.11.RELEASE&lt;/rabbitMq.version&gt;
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;
        &lt;version&gt;${rabbitMq.version}&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<h3 id="2在config类配置mq参数">2.在Config类配置Mq参数</h3>
<blockquote>
<p>注意：<br>
如果项目采用集群方式搭建，要注意api调用😭<br>
如果启动后无法创建队列，可以手动去RabbitMq管理页面进行创建交换机并绑定队列；<br>
无法自动创建应该是配置问题，可以在配置文件中实例化 RabbitAdmin 解决（还没有试🖐）</p>
</blockquote>
<pre><code class="language-java">
/**
 *
 * @Description:  RabbitMQ配置类
 */
@Configuration

public  class RabbitMQConfig {

    private static final Logger log = LoggerFactory.getLogger(RabbitMQConfig.class);
//    服务地址
    @Value(&quot;${rabbitmq.addresses}&quot;)
    private String addresses;


//    虚拟主机
    @Value(&quot;${rabbitmq.virtual-host}&quot;)
    private String virtualHost;


    //    账户名
    @Value(&quot;${rabbitmq.username}&quot;)
    private String username;

//    密码
    @Value(&quot;${rabbitmq.password}&quot;)
    private String password;

//    路由键名称
    @Value(&quot;${rabbitmq.routing-key}&quot;)
    private String routingkey;

//    交换机名称
    @Value(&quot;${rabbitmq.exchange}&quot;)
    private String exchange;

//    队列名称
    @Value(&quot;${rabbitmq.queue}&quot;)
    private String queue;

//    是否重试
    @Value(&quot;${rabbitmq.enabled}&quot;)
    private String enabled;

//    最大重试次数
    @Value(&quot;${rabbitmq.max-attempts}&quot;)
    private String maxAttempts;


    /**
     * 交换机
     *
     * @return
     */
    @Bean
    public DirectExchange exchange() {
        return new DirectExchange(exchange, true, false);
    }

    /**
     * 队列
     *
     * @return
     */
    @Bean
    public Queue queue() {
        Map&lt;String, Object&gt; args = new HashMap&lt;&gt;();

        // x-message-ttl 这里声明当前队列消息存活时间
        //args.put(&quot;x-message-ttl&quot;, 6000000);
        return new Queue(queue, true, false, false, args);
    }

    /**
     * 声明 oms队列 与 开发交换机的绑定关系
     *
     * @return
     */
    @Bean
    public Binding binding() {
        return BindingBuilder.bind(queue()).to(exchange()).with(routingkey);
    }

    /**
     * 创建连接工厂
     * @return
     */
    @Bean(name = &quot;connectionFactoryMB&quot;)
    public ConnectionFactory connectionFactory() {
        CachingConnectionFactory cachingConnectionFactory = new CachingConnectionFactory();
        cachingConnectionFactory.setAddresses(addresses);
        cachingConnectionFactory.setUsername(username);
        cachingConnectionFactory.setPassword(password);
        cachingConnectionFactory.setVirtualHost(virtualHost);

        log.info(&quot;连接工厂设置完成，连接地址{}&quot;,addresses);
        log.info(&quot;连接工厂设置完成，连接用户{}&quot;,username);
        return cachingConnectionFactory;
    }


    /**
     * 实例化RabbitTemplate工具类
     * @param connectionFactory
     * @return
     */
    @Bean
    public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactoryMB) {
        RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactoryMB);
        return rabbitTemplate;
    }

    /**
     * 设置明确默认值的监听器工厂
     * @param connectionFactory
     * @return
     */
    @Bean
    public RabbitListenerContainerFactory&lt;?&gt; rabbitListenerContainerFactory(ConnectionFactory connectionFactory){
        //SimpleRabbitListenerContainerFactory发现消息中有content_type有text就会默认将其转换成string类型的
        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();
        factory.setConnectionFactory(connectionFactory);
        return factory;
    }

}

</code></pre>
<p>附上参考链接：<br>
[https://blog.csdn.net/weixin_34209406/article/details/92568996 ]<br>
[https://blog.csdn.net/weixin_43744059/article/details/106231698]</p>
<ol start="3">
<li>配置生产者</li>
</ol>
<ul>
<li>生产者配置相对简单，只需要将 rabbitTemplate 类注入，调用 convertAndSend 方法，参数为交<strong>换机名称</strong>、<strong>队列名称</strong>、<strong>发送内容</strong>（注意与配置一一对应）</li>
</ul>
<pre><code class="language-java">/**
 *
 * @desc:  RabbitMq生产者实现类
 */
@Component
public class FailProducerService implements FailProducer {

    private static final Logger log = LoggerFactory.getLogger(FeiHeProcessService.class);
    //    交换机名称
    @Value(&quot;${rabbitmq.exchange}&quot;)
    private String exchange;

    //    路由键名称
    @Value(&quot;${rabbitmq.routing-key}&quot;)
    private String routingKey;


    //    注入RabbitTemplate
    @Autowired
    private RabbitTemplate rabbitTemplate;


    @Override
    public void convertAndSend(FailureDto FailureDto) {


//       调用RabbitTemplate发送消息
        try {
            String json = JSONObject.toJSONString(FailureDto);
            rabbitTemplate.convertAndSend(exchange, routingKey, json);
            log.info(&quot;发送消息内容：{}&quot;,json);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

</code></pre>
<ol start="4">
<li>配置消费者</li>
</ol>
<ul>
<li>消费者则更加简单，一个注解搞定 @RabbitListener（指定的队列名）</li>
</ul>
<blockquote>
<p>注意：<br>
配置完消费后，无法消费消息的情况：首先检查队列内有无待消费消息，启动类加上 @EnableRabbit 注解就可以接到了</p>
</blockquote>
<pre><code class="language-java">/**
 *
 * @Description:  RabbitMq消费者接口实现类
 */
@Component
public class FailConsumerService {
    private static final Logger log = LoggerFactory.getLogger(FeiHeProcessService.class);
    private static final String QUEUES = &quot;fail_log_queue&quot;;

    @Autowired
    private FailureDto failureDao;

    @RabbitHandler(isDefault = true)
    @RabbitListener(queues = QUEUES)
    public void PrintLog(Message message) {

        if (message != null &amp;&amp; message.getBody() != null) {
            log.info(&quot;接收到消息为：{}&quot;, message);

//        1.解析Json
            FailureDto failureDto = null;
            try {
                failureDto = JSON.parseObject(new String(message.getBody()), FailureLogDto.class);
            } catch (Exception e) {
                e.printStackTrace();
                log.error(&quot;Json转换实体失败：&quot;, e);
            }
//        2.存库
            try {
                failureDao.insertFailLog(failureDto);
                log.info(&quot;保存成功！&quot;);
            } catch (Exception e) {
                e.printStackTrace();
                log.error(&quot;错误日志保存失败：&quot;, e);
            }
        }

    }

}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://haihaihai2015.github.io/post/hello-gridea/</id>
        <link href="https://haihaihai2015.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>